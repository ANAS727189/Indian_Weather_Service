package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"strings"
	"time"

	"github.com/gorilla/mux"
	"github.com/rs/cors"
)

type apiConfigData struct {
	OpenWeatherMapApiKey string `json:"openWeatherMapApiKey"`
}

type weatherData struct {
	Name    string `json:"name"`
	Country string `json:"country"`
	Main    struct {
		Temp      float64 `json:"temp"`
		FeelsLike float64 `json:"feels_like"`
		TempMin   float64 `json:"temp_min"`
		TempMax   float64 `json:"temp_max"`
		Pressure  int     `json:"pressure"`
		Humidity  int     `json:"humidity"`
	} `json:"main"`
	Weather []struct {
		Main        string `json:"main"`
		Description string `json:"description"`
		Icon        string `json:"icon"`
	} `json:"weather"`
	Wind struct {
		Speed float64 `json:"speed"`
		Deg   int     `json:"deg"`
	} `json:"wind"`
	Clouds struct {
		All int `json:"all"`
	} `json:"clouds"`
	Sys struct {
		Country string `json:"country"`
		Sunrise int64  `json:"sunrise"`
		Sunset  int64  `json:"sunset"`
	} `json:"sys"`
	Visibility int   `json:"visibility"`
	Timezone   int   `json:"timezone"`
	Dt         int64 `json:"dt"`
}

type forecastData struct {
	List []struct {
		Dt   int64 `json:"dt"`
		Main struct {
			Temp      float64 `json:"temp"`
			FeelsLike float64 `json:"feels_like"`
			TempMin   float64 `json:"temp_min"`
			TempMax   float64 `json:"temp_max"`
			Pressure  int     `json:"pressure"`
			Humidity  int     `json:"humidity"`
		} `json:"main"`
		Weather []struct {
			Main        string `json:"main"`
			Description string `json:"description"`
			Icon        string `json:"icon"`
		} `json:"weather"`
		Wind struct {
			Speed float64 `json:"speed"`
			Deg   int     `json:"deg"`
		} `json:"wind"`
		Clouds struct {
			All int `json:"all"`
		} `json:"clouds"`
		DtTxt string `json:"dt_txt"`
	} `json:"list"`
	City struct {
		Name    string `json:"name"`
		Country string `json:"country"`
	} `json:"city"`
}

type errorResponse struct {
	Error   string `json:"error"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

type healthResponse struct {
	Status    string    `json:"status"`
	Timestamp time.Time `json:"timestamp"`
	Version   string    `json:"version"`
	Uptime    string    `json:"uptime"`
}

var startTime = time.Now()

func loadApiConfig(filename string) (apiConfigData, error) {
	bytes, err := ioutil.ReadFile(filename)
	if err != nil {
		return apiConfigData{}, err
	}
	var c apiConfigData
	err = json.Unmarshal(bytes, &c)
	if err != nil {
		return apiConfigData{}, err
	}
	return c, nil
}

func writeErrorResponse(w http.ResponseWriter, message string, status int) {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(status)
	response := errorResponse{
		Error:   http.StatusText(status),
		Message: message,
		Status:  status,
	}
	json.NewEncoder(w).Encode(response)
}

func healthHandler(w http.ResponseWriter, r *http.Request) {
	uptime := time.Since(startTime)
	response := healthResponse{
		Status:    "healthy",
		Timestamp: time.Now(),
		Version:   "1.0.0",
		Uptime:    uptime.String(),
	}
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(response)
}

func getCurrentWeather(city string) (weatherData, error) {
	apiConfig, err := loadApiConfig(".apiConfig")
	if err != nil {
		return weatherData{}, fmt.Errorf("failed to load API config: %v", err)
	}

	url := fmt.Sprintf("https://api.openweathermap.org/data/2.5/weather?q=%s&appid=%s&units=metric",
		city, apiConfig.OpenWeatherMapApiKey)

	resp, err := http.Get(url)
	if err != nil {
		return weatherData{}, fmt.Errorf("failed to fetch weather data: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode == 404 {
		return weatherData{}, fmt.Errorf("city not found")
	}
	if resp.StatusCode != http.StatusOK {
		return weatherData{}, fmt.Errorf("API request failed with status: %s", resp.Status)
	}

	var data weatherData
	if err := json.NewDecoder(resp.Body).Decode(&data); err != nil {
		return weatherData{}, fmt.Errorf("failed to decode weather data: %v", err)
	}

	return data, nil
}

func getForecast(city string) (forecastData, error) {
	apiConfig, err := loadApiConfig(".apiConfig")
	if err != nil {
		return forecastData{}, fmt.Errorf("failed to load API config: %v", err)
	}

	url := fmt.Sprintf("https://api.openweathermap.org/data/2.5/forecast?q=%s&appid=%s&units=metric",
		city, apiConfig.OpenWeatherMapApiKey)

	resp, err := http.Get(url)
	if err != nil {
		return forecastData{}, fmt.Errorf("failed to fetch forecast data: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode == 404 {
		return forecastData{}, fmt.Errorf("city not found")
	}
	if resp.StatusCode != http.StatusOK {
		return forecastData{}, fmt.Errorf("API request failed with status: %s", resp.Status)
	}

	var data forecastData
	if err := json.NewDecoder(resp.Body).Decode(&data); err != nil {
		return forecastData{}, fmt.Errorf("failed to decode forecast data: %v", err)
	}

	return data, nil
}

func currentWeatherHandler(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	city := vars["city"]

	if city == "" {
		writeErrorResponse(w, "City parameter is required", http.StatusBadRequest)
		return
	}

	data, err := getCurrentWeather(city)
	if err != nil {
		if strings.Contains(err.Error(), "city not found") {
			writeErrorResponse(w, fmt.Sprintf("City '%s' not found", city), http.StatusNotFound)
		} else {
			writeErrorResponse(w, err.Error(), http.StatusInternalServerError)
		}
		return
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(data)
}

func forecastHandler(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	city := vars["city"]

	if city == "" {
		writeErrorResponse(w, "City parameter is required", http.StatusBadRequest)
		return
	}

	data, err := getForecast(city)
	if err != nil {
		if strings.Contains(err.Error(), "city not found") {
			writeErrorResponse(w, fmt.Sprintf("City '%s' not found", city), http.StatusNotFound)
		} else {
			writeErrorResponse(w, err.Error(), http.StatusInternalServerError)
		}
		return
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(data)
}

// Legacy handler for backward compatibility
func weatherHandler(w http.ResponseWriter, r *http.Request) {
	city := strings.SplitN(r.URL.Path, "/", 3)[2]
	data, err := getCurrentWeather(city)
	if err != nil {
		writeErrorResponse(w, err.Error(), http.StatusInternalServerError)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(data)
}

func main() {
	r := mux.NewRouter()

	// API routes
	api := r.PathPrefix("/api/v1").Subrouter()
	api.HandleFunc("/health", healthHandler).Methods("GET")
	api.HandleFunc("/weather/{city}", currentWeatherHandler).Methods("GET")
	api.HandleFunc("/forecast/{city}", forecastHandler).Methods("GET")

	// Legacy routes for backward compatibility
	r.HandleFunc("/weather/{city}", weatherHandler).Methods("GET")

	// Setup CORS
	c := cors.New(cors.Options{
		AllowedOrigins:   []string{"http://localhost:3000", "http://127.0.0.1:3000"},
		AllowedMethods:   []string{"GET", "POST", "PUT", "DELETE", "OPTIONS"},
		AllowedHeaders:   []string{"*"},
		AllowCredentials: true,
	})

	handler := c.Handler(r)

	log.Println("Weather API server starting on port 8080...")
	log.Println("Available endpoints:")
	log.Println("  GET /api/v1/health - Health check")
	log.Println("  GET /api/v1/weather/{city} - Current weather")
	log.Println("  GET /api/v1/forecast/{city} - 5-day forecast")

	if err := http.ListenAndServe(":8080", handler); err != nil {
		log.Fatal("Server failed to start:", err)
	}
}
